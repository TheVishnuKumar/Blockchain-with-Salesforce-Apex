/*
The MIT License

Copyright (c) 2010-2018 Vishnu Kumar, Inc. http://0to1code.com/

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
public class BlockChain{
    
    public List<Block> chain;
    
    public BlockChain(){
        chain = new List<Block>();
    }

    public void addBlock(string data){
        //Defining Index from chain size
        integer index = chain.size();
        
        //Checking for previous block's hash, If coming block it first one then it set the previous block as '0'
        string prevHash = chain.isEmpty()==true ? '0' : chain.get(chain.size()-1).hash;
        
        //Creating a block from index, data and previous block's hash
        Block newBlock = new Block(index, data, prevHash);
        
        //Adding the new block in the chain
        chain.add(newBlock);
    }
    
    public boolean isChainValid(){

        for(integer i=0; i < chain.size() ; i++ ){        
            if( !isBlockValid(i) ){
                return false;
            }
        }
    
        return true;
    }
    
    public boolean isBlockValid(integer index){
        //Checking block's hash with run time calculated the hash from the block
        //If someone has changed the block data then getHash will return a new data
        //This will not be same as the block's Hash
        if(chain[index].hash != chain[index].getHash() ){
            return false;
        }
    
        //If the index is greater than zero then it is also checking the block's prevHash from previous block's hash.
        //If someone changed the data and but still he needs to change the hash as well
        //Hash is generated by the combination of data+index+timestap+prevHash. 
        //If someone wants to make the hash correct, he has to change the prevHash as well
        
        //Now Let's say all the needed values are changed
        //But now this line will check prevHash from previous index's block hash.
        //It will not be the same. Now it sends the false in return.
        
        if(index > 0 && chain[index].prevHash != chain[index-1].hash ){
            return false;
        }
        return true;
    }
}
